{"ast":null,"code":"var _jsxFileName = \"/home/magnus/Documents/UiT/Informatikk/3.\\xE5r/INF-2300/INF-2300-Assignment-2/src/to_do_list/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\";\nlet id = 0;\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]); //Create a list \"todos\" and a function \"setTodos\" for modifying the list of todos. useState sets the \"todos\" list to a default empty list \"[]\"\n  const todoNameRef = useRef(); //Creating variable for fetching an inputstring from user\n\n  //Create effect function that loads the todos list from local storage\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)); //Fetch local stored todos list\n    if (storedTodos) setTodos(storedTodos); //If there are stored todos in the local file\n  }, []);\n\n  //Creating function that saves the state of the todos list every time the todos list is modified\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n  function AddTodo(event) {\n    const name = todoNameRef.current.value; //Fetching the value of the user input string\n    if (name === \"\") return; //If user inputs an empty string, just return\n\n    id += 1;\n    setTodos(prevTodos => {\n      //Modifying the todos list\n      console.log(\"ID\", id);\n      return [...prevTodos, {\n        id: id,\n        name: name,\n        completed: false\n      }]; //Adding new todo to the todos list\n    });\n\n    todoNameRef.current.value = null; //Clear out the text on the input bar, just for estetics\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"                                          \", /*#__PURE__*/_jsxDEV(TodoList, {\n      todoList: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), \"                               \", /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: todoNameRef,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \"                      \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: AddTodo,\n      children: \"Add Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), \"                 \", /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Clear Completed Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), \"    \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"0 things to do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \"                 \"]\n  }, void 0, true);\n}\n_s(App, \"qH2GEr92xkIFQxR2Djx4V7Ti/yU=\");\n_c = App;\nexport default App;\n\n// function App()\n// { \n//   const [resourceType, setResourceType] = useState(\"posts\")\n//   //Create a list \"items\" and a function that modifies this list. useState sets the list to empty by defining it as \"[]\"\n//   const [items, setItems] = useState([]) \n\n//   //useEffect function will run every time the [resourceType] changes\n//   useEffect(() =>\n//   {\n//     fetch(`http://jsonplaceholder.typicode.com/${resourceType}`)\n//     .then(response => response.json())\n//     .then(json => setItems(json))\n//   }, [resourceType])\n\n//   return(\n//     <>\n//       <div>\n//         {/*Create button that calls a function when clicked*/}\n//         <button onClick={() => setResourceType(\"posts\")}>Posts</button>\n//         <button onClick={() => setResourceType(\"Users\")}>Users</button>\n//         <button onClick={() => setResourceType(\"Comments\")}>Comments</button>\n//       </div>\n//       <h1>{resourceType}</h1>\n//       {items.map(item => {\n//         return <pre>{JSON.stringify(item)}</pre>\n//       })}\n//     </>\n//   )\n// }\n\n// export default App;\n\n// function App()\n// { \n//   //current count,function to update the count \n//   const [count, setCount] = useState(4);  //useState sets count variable to 4 from start\n\n//   //Declare function that decrements the count\n//   function decrementCount()\n//   {\n//     //Call setCount function that allows us to update the state of \"count\"\n//     //BUT we make a new variable that takes the current state of the \"count\" variable and decrement it\n//     setCount(fakeCount => fakeCount - 1);\n//   }\n\n//   //Declare function that increments the count\n//   function incrementCount()\n//   {\n//     //Call setCount function that allows us to update the state of \"count\"\n//     //BUT we make a new variable that takes the current state of the \"count\" variable and decrement it\n//     setCount(fakeCount => fakeCount + 1);\n//   }\n\n//   return(\n//     <>\n//         {/*Create button that calls a function when clicked*/}\n//         <button onClick={decrementCount}>-</button>\n//         <span>{count}</span>\n//         <button onClick={incrementCount}>+</button>\n\n//       </>\n//     )\n// }\n\n// export default App;\n\n// const Main = () => {\n// const [todos, SetTodos] = useState([]);\n\n// function GetRequests()\n// {\n//   axios.get(`http://localhost:5000/api/items/`).then(result => { \n//     const list = result.data;\n//     SetTodos(list);\n//     console.log(\"Logging ToDoList: \", todos);\n//   });\n// }\n\n// return(\n//   <div>\n//     <h1>Online To Do list</h1>\n//   </div>\n// )\n\n// const [list, setList] = React.useState(initialList);\n// const [input_string, input_field] = React.useState(\"\");\n\n// //Track input field's state\n// function handleChange(event) {\n//   input_field(event.target.value);\n// }\n\n// //Add an item to list\n// function handleAdd() {\n//   //Add input_string and id to list\n//   const List = list.concat({input_string, id});\n\n//   setList(List);\n\n//   //Set input field back to empty state\n//   input_field(\"\");\n// }\n\n// //Remove an item from the list\n// function handleRemove() {\n//   const newList = list.filter((item) => item.id !== id);\n\n//   setList(newList);\n\n// }\n\n// return(\n//   <div>\n//     <div>\n//       <h1>Online ToDo list</h1>\n//       <h5>Add something to do, then press add</h5>\n//       <input type=\"text\" value={input_string} onChange={handleChange}/>     {/*Create input field that calls function handleChange*/}\n//       <button type=\"button\" onClick={handleAdd}>                            {/*Create button that calls handleAdd when pushed*/}\n//         Add\n//       </button>\n//     </div>\n\n//     <li>{list.map((item) => (                     //Go through every item in \"List\"\n//         <p>{item.input_string}</p>         //Display item\n\n//         // <button type=\"button\" onClick={ () => handleRemove(item.id)}>\n//         //   Remove\n//         // </button>\n//         ))}\n//     </li>\n//   </div>\n// );\n// }\n\n// export default Main;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","TodoList","LOCAL_STORAGE_KEY","id","App","todos","setTodos","todoNameRef","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","AddTodo","event","name","current","value","prevTodos","console","log","completed"],"sources":["/home/magnus/Documents/UiT/Informatikk/3.Ã¥r/INF-2300/INF-2300-Assignment-2/src/to_do_list/src/App.js"],"sourcesContent":["import React, {useState, useRef, useEffect} from \"react\";\nimport TodoList from \"./TodoList\";\n\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\"\nlet id = 0;\n\nfunction App()\n{\n  const [todos, setTodos] = useState([])  //Create a list \"todos\" and a function \"setTodos\" for modifying the list of todos. useState sets the \"todos\" list to a default empty list \"[]\"\n  const todoNameRef = useRef()            //Creating variable for fetching an inputstring from user\n\n  \n  //Create effect function that loads the todos list from local storage\n  useEffect(() => \n  {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));        //Fetch local stored todos list\n    if(storedTodos) setTodos(storedTodos);                              //If there are stored todos in the local file\n  }, [])\n  \n  //Creating function that saves the state of the todos list every time the todos list is modified\n  useEffect(() => \n  {\n   localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function AddTodo(event) \n  {\n    const name = todoNameRef.current.value //Fetching the value of the user input string\n    if(name === \"\") return;                 //If user inputs an empty string, just return\n    \n    id += 1;\n    setTodos(prevTodos => {                 //Modifying the todos list\n      console.log(\"ID\", id);\n      return [...prevTodos, {id:id, name: name, completed: false}]              //Adding new todo to the todos list\n    })\n    todoNameRef.current.value = null;       //Clear out the text on the input bar, just for estetics\n  }\n\n  return(\n    <>                                          {/*Can not return two things, so wrap the two things in one element by using <> </> */}\n      <TodoList todoList = {todos}/>                               {/*Call TodoList component and pass inn the list of todos*/}\n      <input ref={todoNameRef} type=\"text\"/>                      {/*Fetching input from user */}\n      <button onClick={AddTodo}>Add Todo</button>                 {/*Creating button for adding things to ToDo */}\n      <button>Clear Completed Todos</button>    {/*Creating button for clearing completed todos*/}\n      <div>0 things to do</div>                 {/*Displaying how many todos left*/}\n    </>\n  )\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n// function App()\n// { \n//   const [resourceType, setResourceType] = useState(\"posts\")\n//   //Create a list \"items\" and a function that modifies this list. useState sets the list to empty by defining it as \"[]\"\n//   const [items, setItems] = useState([]) \n  \n  \n  \n//   //useEffect function will run every time the [resourceType] changes\n//   useEffect(() =>\n//   {\n//     fetch(`http://jsonplaceholder.typicode.com/${resourceType}`)\n//     .then(response => response.json())\n//     .then(json => setItems(json))\n//   }, [resourceType])\n\n//   return(\n//     <>\n//       <div>\n//         {/*Create button that calls a function when clicked*/}\n//         <button onClick={() => setResourceType(\"posts\")}>Posts</button>\n//         <button onClick={() => setResourceType(\"Users\")}>Users</button>\n//         <button onClick={() => setResourceType(\"Comments\")}>Comments</button>\n//       </div>\n//       <h1>{resourceType}</h1>\n//       {items.map(item => {\n//         return <pre>{JSON.stringify(item)}</pre>\n//       })}\n//     </>\n//   )\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function App()\n// { \n//   //current count,function to update the count \n//   const [count, setCount] = useState(4);  //useState sets count variable to 4 from start\n  \n//   //Declare function that decrements the count\n//   function decrementCount()\n//   {\n//     //Call setCount function that allows us to update the state of \"count\"\n//     //BUT we make a new variable that takes the current state of the \"count\" variable and decrement it\n//     setCount(fakeCount => fakeCount - 1);\n//   }\n\n//   //Declare function that increments the count\n//   function incrementCount()\n//   {\n//     //Call setCount function that allows us to update the state of \"count\"\n//     //BUT we make a new variable that takes the current state of the \"count\" variable and decrement it\n//     setCount(fakeCount => fakeCount + 1);\n//   }\n  \n//   return(\n//     <>\n//         {/*Create button that calls a function when clicked*/}\n//         <button onClick={decrementCount}>-</button>\n//         <span>{count}</span>\n//         <button onClick={incrementCount}>+</button>\n\n//       </>\n//     )\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // const Main = () => {\n  // const [todos, SetTodos] = useState([]);\n\n  // function GetRequests()\n  // {\n  //   axios.get(`http://localhost:5000/api/items/`).then(result => { \n  //     const list = result.data;\n  //     SetTodos(list);\n  //     console.log(\"Logging ToDoList: \", todos);\n  //   });\n  // }\n\n\n\n  // return(\n  //   <div>\n  //     <h1>Online To Do list</h1>\n  //   </div>\n  // )\n\n  // const [list, setList] = React.useState(initialList);\n  // const [input_string, input_field] = React.useState(\"\");\n\n  // //Track input field's state\n  // function handleChange(event) {\n  //   input_field(event.target.value);\n  // }\n\n  // //Add an item to list\n  // function handleAdd() {\n  //   //Add input_string and id to list\n  //   const List = list.concat({input_string, id});\n\n\n  //   setList(List);\n    \n  //   //Set input field back to empty state\n  //   input_field(\"\");\n  // }\n\n  // //Remove an item from the list\n  // function handleRemove() {\n  //   const newList = list.filter((item) => item.id !== id);\n\n  //   setList(newList);\n\n  // }\n\n  // return(\n  //   <div>\n  //     <div>\n  //       <h1>Online ToDo list</h1>\n  //       <h5>Add something to do, then press add</h5>\n  //       <input type=\"text\" value={input_string} onChange={handleChange}/>     {/*Create input field that calls function handleChange*/}\n  //       <button type=\"button\" onClick={handleAdd}>                            {/*Create button that calls handleAdd when pushed*/}\n  //         Add\n  //       </button>\n  //     </div>\n\n  //     <li>{list.map((item) => (                     //Go through every item in \"List\"\n  //         <p>{item.input_string}</p>         //Display item\n          \n  //         // <button type=\"button\" onClick={ () => handleRemove(item.id)}>\n  //         //   Remove\n  //         // </button>\n  //         ))}\n  //     </li>\n  //   </div>\n  // );\n// }\n\n// export default Main;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAO,OAAO;AACxD,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAAA;AAElC,MAAMC,iBAAiB,GAAG,eAAe;AACzC,IAAIC,EAAE,GAAG,CAAC;AAEV,SAASC,GAAG,GACZ;EAAA;EACE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,EAAE;EACxC,MAAMS,WAAW,GAAGR,MAAM,EAAE,EAAY;;EAGxC;EACAC,SAAS,CAAC,MACV;IACE,MAAMQ,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACV,iBAAiB,CAAC,CAAC,CAAC,CAAQ;IAChF,IAAGM,WAAW,EAAEF,QAAQ,CAACE,WAAW,CAAC,CAAC,CAA8B;EACtE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAR,SAAS,CAAC,MACV;IACCW,YAAY,CAACE,OAAO,CAACX,iBAAiB,EAAEO,IAAI,CAACK,SAAS,CAACT,KAAK,CAAC,CAAC;EAC/D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,SAASU,OAAO,CAACC,KAAK,EACtB;IACE,MAAMC,IAAI,GAAGV,WAAW,CAACW,OAAO,CAACC,KAAK,EAAC;IACvC,IAAGF,IAAI,KAAK,EAAE,EAAE,OAAO,CAAiB;;IAExCd,EAAE,IAAI,CAAC;IACPG,QAAQ,CAACc,SAAS,IAAI;MAAkB;MACtCC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEnB,EAAE,CAAC;MACrB,OAAO,CAAC,GAAGiB,SAAS,EAAE;QAACjB,EAAE,EAACA,EAAE;QAAEc,IAAI,EAAEA,IAAI;QAAEM,SAAS,EAAE;MAAK,CAAC,CAAC,EAAc;IAC5E,CAAC,CAAC;;IACFhB,WAAW,CAACW,OAAO,CAACC,KAAK,GAAG,IAAI,CAAC,CAAO;EAC1C;;EAEA,oBACE;IAAA,sEACE,QAAC,QAAQ;MAAC,QAAQ,EAAId;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE,kDAC9B;MAAO,GAAG,EAAEE,WAAY;MAAC,IAAI,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE,yCACtC;MAAQ,OAAO,EAAEQ,OAAQ;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,oCAC3C;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsC,uBACtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyB;EAAA,gBACxB;AAEP;AAAC,GAzCQX,GAAG;AAAA,KAAHA,GAAG;AA2CZ,eAAeA,GAAG;;AAYlB;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAeA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAgBE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}